#!/usr/bin/env python3
"""
Script de demonstra√ß√£o dos testes E2E do sistema FetalCare.

Este script demonstra:
1. Verifica√ß√£o de pr√©-requisitos
2. Coleta de testes dispon√≠veis
3. Gera√ß√£o de relat√≥rios
4. Execu√ß√£o de testes simulados
"""

import os
import sys
import subprocess
from datetime import datetime

def print_header():
    """Imprime cabe√ßalho do script."""
    print("=" * 80)
    print("üß™ DEMONSTRA√á√ÉO DOS TESTES E2E - SISTEMA FETALCARE üß™")
    print("=" * 80)
    print("Sistema de monitoramento fetal com an√°lise por Machine Learning")
    print("Testes automatizados End-to-End com Selenium WebDriver")
    print("=" * 80)
    print()

def verificar_prerequisitos():
    """Verifica se os pr√©-requisitos est√£o instalados."""
    print("üîç Verificando pr√©-requisitos...")
    print()
    
    try:
        # Verificar Python
        import platform
        python_version = platform.python_version()
        print(f"  ‚úÖ Python               - Vers√£o: {python_version}")
        
        # Verificar pytest
        result = subprocess.run(['pytest', '--version'], capture_output=True, text=True)
        if result.returncode == 0:
            pytest_version = result.stdout.strip().split('\n')[0]
            print(f"  ‚úÖ pytest               - {pytest_version}")
        else:
            print(f"  ‚ùå pytest               - N√£o instalado")
            
        # Verificar Selenium
        try:
            import selenium
            print(f"  ‚úÖ Selenium             - Vers√£o: {selenium.__version__}")
        except ImportError:
            print(f"  ‚ùå Selenium             - N√£o instalado")
            
        # Verificar webdriver-manager
        try:
            from webdriver_manager.chrome import ChromeDriverManager
            driver_path = ChromeDriverManager().install()
            print(f"  ‚úÖ ChromeDriver         - Dispon√≠vel")
        except Exception as e:
            print(f"  ‚ùå ChromeDriver         - Erro: {e}")
            
        print()
        print("‚úÖ Pr√©-requisitos b√°sicos verificados!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na verifica√ß√£o: {e}")
        return False

def listar_testes():
    """Lista os testes dispon√≠veis."""
    print("üìã Testes E2E Dispon√≠veis:")
    print()
    
    try:
        result = subprocess.run(
            ['pytest', '--collect-only', '-q'], 
            capture_output=True, 
            text=True,
            cwd=os.getcwd()
        )
        
        if result.returncode == 0:
            lines = result.stdout.strip().split('\n')
            for i, line in enumerate(lines, 1):
                if '::' in line:
                    test_name = line.split('::')[-1]
                    print(f"  {i}. {test_name}")
            
            # Contar total de testes
            test_count = len([line for line in lines if '::' in line])
            print()
            print(f"üìä Total de testes implementados: {test_count}")
            
        else:
            print("‚ùå Erro ao coletar testes")
            print(result.stderr)
            
    except Exception as e:
        print(f"‚ùå Erro: {e}")

def gerar_relatorio_estrutura():
    """Gera relat√≥rio HTML da estrutura dos testes."""
    print("üìÑ Gerando relat√≥rio da estrutura dos testes...")
    
    try:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        relatorio_path = f"relatorios/demo_estrutura_{timestamp}.html"
        
        result = subprocess.run([
            'pytest', 
            '--collect-only', 
            f'--html={relatorio_path}',
            '--self-contained-html'
        ], capture_output=True, text=True)
        
        if result.returncode == 0:
            print(f"  ‚úÖ Relat√≥rio gerado: {relatorio_path}")
            full_path = os.path.abspath(relatorio_path)
            print(f"  üìÅ Caminho completo: {full_path}")
        else:
            print("  ‚ùå Erro ao gerar relat√≥rio")
            print(result.stderr)
            
    except Exception as e:
        print(f"‚ùå Erro: {e}")

def demonstrar_funcionalidades():
    """Demonstra as funcionalidades dos testes E2E."""
    print("üéØ Funcionalidades Implementadas:")
    print()
    
    funcionalidades = [
        "Page Object Model - Estrutura profissional",
        "Testes de Fluxo Completo - Preenchimento ‚Üí An√°lise ‚Üí Resultados",
        "Testes de Performance - Tempos de execu√ß√£o controlados",
        "Testes de Valida√ß√£o - Dados inv√°lidos e tratamento de erros",
        "Testes de Robustez - M√∫ltiplas execu√ß√µes e stress test",
        "Screenshots Autom√°ticos - Evid√™ncias visuais",
        "Relat√≥rios HTML - pytest-html com detalhes",
        "Relat√≥rios Allure - Dashboards profissionais",
        "Fixtures Configur√°veis - Dados de teste reutiliz√°veis",
        "Marcadores pytest - Organiza√ß√£o por tipo de teste"
    ]
    
    for i, func in enumerate(funcionalidades, 1):
        print(f"  {i:2d}. {func}")
    
    print()

def demonstrar_cenarios():
    """Demonstra os cen√°rios de teste implementados."""
    print("üé¨ Cen√°rios de Teste Implementados:")
    print()
    
    cenarios = [
        {
            "nome": "Fluxo Completo Normal",
            "descricao": "Teste principal com dados v√°lidos",
            "marcadores": ["critical", "smoke", "regression"]
        },
        {
            "nome": "Fluxo com Risco Fetal",
            "descricao": "Par√¢metros que indicam risco fetal",
            "marcadores": ["critical", "ml"]
        },
        {
            "nome": "Performance do Sistema",
            "descricao": "Verifica tempos de resposta",
            "marcadores": ["performance", "fast"]
        },
        {
            "nome": "Valida√ß√£o de Dados",
            "descricao": "Dados inv√°lidos e tratamento de erro",
            "marcadores": ["validation", "form"]
        },
        {
            "nome": "M√∫ltiplas Execu√ß√µes",
            "descricao": "Teste de robustez e estabilidade",
            "marcadores": ["slow", "regression"]
        },
        {
            "nome": "Interrup√ß√£o de An√°lise",
            "descricao": "Comportamento em situa√ß√µes extremas",
            "marcadores": ["edge_case"]
        }
    ]
    
    for i, cenario in enumerate(cenarios, 1):
        print(f"  {i}. {cenario['nome']}")
        print(f"     üìù {cenario['descricao']}")
        print(f"     üè∑Ô∏è  Marcadores: {', '.join(cenario['marcadores'])}")
        print()

def demonstrar_dados_teste():
    """Mostra exemplos dos dados de teste."""
    print("üóÉÔ∏è  Dados de Teste Implementados:")
    print()
    
    print("üìä gestantes_validas.json:")
    print("  ‚Ä¢ 70+ casos de teste diferentes")
    print("  ‚Ä¢ Gestantes normais, casos especiais, limites de idade")
    print("  ‚Ä¢ Nomes internacionais com UTF-8")
    print("  ‚Ä¢ Valida√ß√£o de CPF e campos obrigat√≥rios")
    print()
    
    print("üß† parametros_ml.json:")
    print("  ‚Ä¢ 12 cen√°rios cl√≠nicos distintos")
    print("  ‚Ä¢ Normais, Risco Leve, Risco Moderado, Cr√≠tico")
    print("  ‚Ä¢ Bradicardia, Variabilidade Ausente")
    print("  ‚Ä¢ Casos de Primeiro Trimestre e Trabalho de Parto")
    print()

def main():
    """Fun√ß√£o principal do script de demonstra√ß√£o."""
    print_header()
    
    # Verificar pr√©-requisitos
    if not verificar_prerequisitos():
        print("‚ùå Pr√©-requisitos n√£o atendidos. Instale as depend√™ncias necess√°rias.")
        return
    
    print()
    
    # Listar testes
    listar_testes()
    print()
    
    # Gerar relat√≥rio
    gerar_relatorio_estrutura()
    print()
    
    # Demonstrar funcionalidades
    demonstrar_funcionalidades()
    print()
    
    # Demonstrar cen√°rios
    demonstrar_cenarios()
    
    # Demonstrar dados
    demonstrar_dados_teste()
    
    print("üéâ Demonstra√ß√£o Conclu√≠da!")
    print()
    print("üí° Pr√≥ximos Passos:")
    print("  1. Inicie o sistema FetalCare (frontend + API)")
    print("  2. Execute: python scripts/run_e2e_tests.py")
    print("  3. Escolha os testes desejados no menu interativo")
    print("  4. Visualize os relat√≥rios gerados")
    print()
    print("üìñ Documenta√ß√£o completa em: README_E2E.md")

if __name__ == "__main__":
    main() 