#!/usr/bin/env python3
"""
Script executor principal dos testes E2E do FetalCare.

Este script fornece uma interface interativa para executar diferentes
tipos de testes E2E com configura√ß√µes personalizadas.
"""

import os
import sys
import subprocess
import json
import time
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional

# Adicionar diret√≥rio raiz ao path
sys.path.append(str(Path(__file__).parent.parent))

try:
    import colorama
    from colorama import Fore, Back, Style
    colorama.init()
except ImportError:
    # Se colorama n√£o estiver dispon√≠vel, usar strings vazias
    class MockColor:
        RED = GREEN = YELLOW = BLUE = MAGENTA = CYAN = WHITE = ""
        RESET = ""
    
    Fore = MockColor()
    Back = MockColor()
    Style = MockColor()
    Style.RESET_ALL = ""


class TestExecutor:
    """Executor de testes E2E com interface interativa."""
    
    def __init__(self):
        """Inicializar executor."""
        self.projeto_root = Path(__file__).parent.parent
        self.resultados_dir = self.projeto_root / "relatorios"
        self.evidencias_dir = self.projeto_root / "evidencias"
        
        # Criar diret√≥rios se n√£o existirem
        self.resultados_dir.mkdir(exist_ok=True)
        self.evidencias_dir.mkdir(exist_ok=True)
        (self.evidencias_dir / "screenshots").mkdir(exist_ok=True)
        (self.evidencias_dir / "logs").mkdir(exist_ok=True)
    
    def print_header(self):
        """Imprimir cabe√ßalho do script."""
        print(f"\n{Fore.CYAN}{'='*70}{Style.RESET_ALL}")
        print(f"{Fore.CYAN}üß™ EXECUTOR DE TESTES E2E - SISTEMA FETALCARE üß™{Style.RESET_ALL}")
        print(f"{Fore.CYAN}{'='*70}{Style.RESET_ALL}")
        print(f"{Fore.WHITE}Sistema de monitoramento fetal com an√°lise por Machine Learning{Style.RESET_ALL}")
        print(f"{Fore.WHITE}Testes automatizados End-to-End com Selenium WebDriver{Style.RESET_ALL}")
        print(f"{Fore.CYAN}{'='*70}{Style.RESET_ALL}\n")
    
    def verificar_prerequisitos(self) -> bool:
        """Verificar se pr√©-requisitos est√£o atendidos."""
        print(f"{Fore.YELLOW}üîç Verificando pr√©-requisitos...{Style.RESET_ALL}")
        
        verificacoes = []
        
        # Verificar Python
        try:
            python_version = sys.version
            verificacoes.append(("Python", True, f"Vers√£o: {python_version.split()[0]}"))
        except Exception as e:
            verificacoes.append(("Python", False, str(e)))
        
        # Verificar pytest
        try:
            result = subprocess.run(["pytest", "--version"], capture_output=True, text=True, timeout=10)
            if result.returncode == 0:
                verificacoes.append(("pytest", True, result.stdout.strip()))
            else:
                verificacoes.append(("pytest", False, "Comando falhou"))
        except Exception as e:
            verificacoes.append(("pytest", False, str(e)))
        
        # Verificar Selenium
        try:
            import selenium
            verificacoes.append(("Selenium", True, f"Vers√£o: {selenium.__version__}"))
        except ImportError:
            verificacoes.append(("Selenium", False, "M√≥dulo n√£o encontrado"))
        
        # Verificar ChromeDriver (tentativa)
        try:
            from selenium import webdriver
            from selenium.webdriver.chrome.service import Service
            from webdriver_manager.chrome import ChromeDriverManager
            
            driver_path = ChromeDriverManager().install()
            verificacoes.append(("ChromeDriver", True, f"Dispon√≠vel em: {driver_path}"))
        except Exception as e:
            verificacoes.append(("ChromeDriver", False, str(e)))
        
        # Verificar servi√ßos (opcional)
        import requests
        
        # Frontend
        try:
            response = requests.get("http://localhost:8080", timeout=5)
            if response.status_code == 200:
                verificacoes.append(("Frontend (8080)", True, "Respondendo"))
            else:
                verificacoes.append(("Frontend (8080)", False, f"Status: {response.status_code}"))
        except Exception:
            verificacoes.append(("Frontend (8080)", False, "N√£o acess√≠vel"))
        
        # API
        try:
            response = requests.get("http://localhost:5001/health", timeout=5)
            if response.status_code == 200:
                verificacoes.append(("API (5001)", True, "Respondendo"))
            else:
                verificacoes.append(("API (5001)", False, f"Status: {response.status_code}"))
        except Exception:
            verificacoes.append(("API (5001)", False, "N√£o acess√≠vel"))
        
        # Mostrar resultados
        print("\nüìã Status dos Pr√©-requisitos:")
        todos_ok = True
        for nome, ok, detalhes in verificacoes:
            status_icon = "‚úÖ" if ok else "‚ùå"
            cor = Fore.GREEN if ok else Fore.RED
            print(f"  {status_icon} {cor}{nome:<20}{Style.RESET_ALL} - {detalhes}")
            if not ok and nome in ["Python", "pytest", "Selenium", "ChromeDriver"]:
                todos_ok = False
        
        if not todos_ok:
            print(f"\n{Fore.RED}‚ö†Ô∏è  Alguns pr√©-requisitos essenciais est√£o faltando.{Style.RESET_ALL}")
            print(f"{Fore.YELLOW}üí° Execute: pip install -r requirements.txt{Style.RESET_ALL}")
            return False
        
        print(f"\n{Fore.GREEN}‚úÖ Pr√©-requisitos essenciais atendidos!{Style.RESET_ALL}")
        
        # Avisar sobre servi√ßos se n√£o estiverem rodando
        servicos_ok = any("Frontend" in v[0] and v[1] for v in verificacoes) and \
                     any("API" in v[0] and v[1] for v in verificacoes)
        
        if not servicos_ok:
            print(f"\n{Fore.YELLOW}‚ö†Ô∏è  Servi√ßos FetalCare n√£o est√£o rodando.{Style.RESET_ALL}")
            print(f"{Fore.YELLOW}   Alguns testes podem falhar. Inicie o sistema antes de continuar.{Style.RESET_ALL}")
        
        return True
    
    def mostrar_menu_principal(self) -> str:
        """Mostrar menu principal e obter escolha do usu√°rio."""
        opcoes = {
            "1": ("üéØ Executar Fluxo Completo", "Teste do fluxo principal end-to-end"),
            "2": ("üìù Executar Testes de Formul√°rio", "Valida√ß√µes de campos e preenchimento"),
            "3": ("ü§ñ Executar Testes de An√°lise ML", "Testes espec√≠ficos da an√°lise de ML"),
            "4": ("üîç Executar Testes de Valida√ß√£o", "Testes de valida√ß√£o e tratamento de erros"),
            "5": ("üì± Executar Testes de Responsividade", "Testes em diferentes resolu√ß√µes"),
            "6": ("üöÄ Executar TODOS os Testes", "Suite completa de testes E2E"),
            "7": ("üìä Gerar Relat√≥rio", "Gerar relat√≥rio dos √∫ltimos testes"),
            "8": ("üîß Configura√ß√µes", "Ajustar configura√ß√µes de execu√ß√£o"),
            "9": ("‚ùì Ajuda", "Informa√ß√µes sobre uso dos testes"),
            "0": ("üö™ Sair", "Encerrar programa")
        }
        
        print(f"\n{Fore.BLUE}üìã MENU PRINCIPAL{Style.RESET_ALL}")
        print(f"{Fore.BLUE}{'‚îÄ' * 50}{Style.RESET_ALL}")
        
        for key, (titulo, descricao) in opcoes.items():
            print(f"  {Fore.WHITE}{key}{Style.RESET_ALL} - {Fore.CYAN}{titulo}{Style.RESET_ALL}")
            print(f"      {Fore.WHITE}{descricao}{Style.RESET_ALL}")
        
        print(f"{Fore.BLUE}{'‚îÄ' * 50}{Style.RESET_ALL}")
        
        while True:
            escolha = input(f"\n{Fore.YELLOW}üëâ Escolha uma op√ß√£o (0-9): {Style.RESET_ALL}").strip()
            if escolha in opcoes:
                return escolha
            print(f"{Fore.RED}‚ùå Op√ß√£o inv√°lida. Tente novamente.{Style.RESET_ALL}")
    
    def executar_pytest(
        self, 
        argumentos: List[str], 
        titulo: str,
        descricao: str = ""
    ) -> bool:
        """
        Executar pytest com argumentos espec√≠ficos.
        
        Args:
            argumentos: Lista de argumentos para pytest
            titulo: T√≠tulo da execu√ß√£o
            descricao: Descri√ß√£o adicional
        
        Returns:
            True se execu√ß√£o foi bem-sucedida, False caso contr√°rio
        """
        print(f"\n{Fore.GREEN}üöÄ {titulo}{Style.RESET_ALL}")
        if descricao:
            print(f"{Fore.WHITE}{descricao}{Style.RESET_ALL}")
        print(f"{Fore.BLUE}{'‚îÄ' * 60}{Style.RESET_ALL}")
        
        # Preparar comando
        cmd = ["pytest"] + argumentos
        
        print(f"{Fore.YELLOW}üìù Comando: {' '.join(cmd)}{Style.RESET_ALL}")
        print(f"{Fore.YELLOW}‚è∞ Iniciando em 3 segundos...{Style.RESET_ALL}")
        time.sleep(3)
        
        # Mudar para diret√≥rio do projeto
        os.chdir(self.projeto_root)
        
        # Executar
        start_time = time.time()
        try:
            result = subprocess.run(cmd, cwd=self.projeto_root, timeout=1800)  # 30 min timeout
            execution_time = time.time() - start_time
            
            if result.returncode == 0:
                print(f"\n{Fore.GREEN}‚úÖ Execu√ß√£o conclu√≠da com sucesso!{Style.RESET_ALL}")
                print(f"{Fore.GREEN}‚è±Ô∏è  Tempo total: {execution_time:.1f} segundos{Style.RESET_ALL}")
                return True
            else:
                print(f"\n{Fore.RED}‚ùå Execu√ß√£o falhou com c√≥digo: {result.returncode}{Style.RESET_ALL}")
                print(f"{Fore.RED}‚è±Ô∏è  Tempo at√© falha: {execution_time:.1f} segundos{Style.RESET_ALL}")
                return False
                
        except subprocess.TimeoutExpired:
            print(f"\n{Fore.RED}‚è∞ Timeout! Execu√ß√£o excedeu 30 minutos.{Style.RESET_ALL}")
            return False
        except KeyboardInterrupt:
            print(f"\n{Fore.YELLOW}‚èπÔ∏è  Execu√ß√£o interrompida pelo usu√°rio.{Style.RESET_ALL}")
            return False
        except Exception as e:
            print(f"\n{Fore.RED}üí• Erro durante execu√ß√£o: {e}{Style.RESET_ALL}")
            return False
    
    def obter_configuracoes_execucao(self) -> Dict[str, any]:
        """Obter configura√ß√µes personalizadas do usu√°rio."""
        print(f"\n{Fore.BLUE}‚öôÔ∏è  CONFIGURA√á√ïES DE EXECU√á√ÉO{Style.RESET_ALL}")
        print(f"{Fore.BLUE}{'‚îÄ' * 40}{Style.RESET_ALL}")
        
        config = {}
        
        # Modo headless
        resposta = input(f"{Fore.YELLOW}üñ•Ô∏è  Executar em modo headless (sem interface gr√°fica)? [s/N]: {Style.RESET_ALL}").strip().lower()
        config['headless'] = resposta in ['s', 'sim', 'y', 'yes']
        
        # Captura de screenshots
        resposta = input(f"{Fore.YELLOW}üì∏ Capturar screenshots sempre (n√£o s√≥ em falhas)? [s/N]: {Style.RESET_ALL}").strip().lower()
        config['screenshots'] = resposta in ['s', 'sim', 'y', 'yes']
        
        # Execu√ß√£o paralela
        resposta = input(f"{Fore.YELLOW}‚ö° Executar testes em paralelo? [S/n]: {Style.RESET_ALL}").strip().lower()
        config['paralelo'] = resposta not in ['n', 'nao', 'no']
        
        # N√∫mero de workers se paralelo
        if config['paralelo']:
            while True:
                try:
                    workers = input(f"{Fore.YELLOW}üë• N√∫mero de workers (auto/1-8) [auto]: {Style.RESET_ALL}").strip()
                    if not workers or workers.lower() == 'auto':
                        config['workers'] = 'auto'
                        break
                    else:
                        num = int(workers)
                        if 1 <= num <= 8:
                            config['workers'] = str(num)
                            break
                        else:
                            print(f"{Fore.RED}‚ùå Use um n√∫mero entre 1 e 8{Style.RESET_ALL}")
                except ValueError:
                    print(f"{Fore.RED}‚ùå Digite um n√∫mero v√°lido{Style.RESET_ALL}")
        
        # Timeout personalizado
        while True:
            try:
                timeout = input(f"{Fore.YELLOW}‚è±Ô∏è  Timeout para testes em segundos [300]: {Style.RESET_ALL}").strip()
                if not timeout:
                    config['timeout'] = 300
                    break
                else:
                    num = int(timeout)
                    if 30 <= num <= 1800:
                        config['timeout'] = num
                        break
                    else:
                        print(f"{Fore.RED}‚ùå Use um valor entre 30 e 1800 segundos{Style.RESET_ALL}")
            except ValueError:
                print(f"{Fore.RED}‚ùå Digite um n√∫mero v√°lido{Style.RESET_ALL}")
        
        return config
    
    def construir_argumentos_pytest(self, tipo: str, config: Dict[str, any] = None) -> List[str]:
        """
        Construir argumentos para pytest baseado no tipo de teste e configura√ß√µes.
        
        Args:
            tipo: Tipo de teste a executar
            config: Configura√ß√µes personalizadas
        
        Returns:
            Lista de argumentos para pytest
        """
        config = config or {}
        
        # Argumentos base
        args = [
            "-v",  # verbose
            "--tb=short",  # traceback curto
            "--strict-markers",  # marcadores estritos
            "--alluredir=relatorios/allure-results",  # relat√≥rio Allure
            "--html=relatorios/html/report.html",  # relat√≥rio HTML
            "--self-contained-html"  # HTML auto-contido
        ]
        
        # Configura√ß√µes condicionais
        if config.get('headless'):
            args.append("--headless")
        
        if config.get('screenshots'):
            args.append("--capture-screenshots")
        
        if config.get('paralelo') and config.get('workers'):
            args.extend(["-n", config['workers']])
        
        if config.get('timeout'):
            args.extend(["--timeout", str(config['timeout'])])
        
        # Argumentos espec√≠ficos por tipo
        if tipo == "fluxo_completo":
            args.extend([
                "cenarios/test_fluxo_completo.py",
                "-m", "critical or smoke"
            ])
        elif tipo == "formularios":
            args.extend([
                "cenarios/test_formulario_gestante.py",
                "cenarios/test_monitoramento.py",
                "-m", "form"
            ])
        elif tipo == "analise_ml":
            args.extend([
                "cenarios/test_analise_ml.py",
                "-m", "ml"
            ])
        elif tipo == "validacoes":
            args.extend([
                "cenarios/test_validacoes.py",
                "-m", "validation"
            ])
        elif tipo == "responsividade":
            args.extend([
                "cenarios/test_responsividade.py",
                "-m", "mobile or tablet or desktop"
            ])
        elif tipo == "todos":
            args.extend([
                "cenarios/",
                "--maxfail=10"  # Parar ap√≥s 10 falhas
            ])
        
        return args
    
    def gerar_relatorio_allure(self) -> bool:
        """Gerar e abrir relat√≥rio Allure."""
        print(f"\n{Fore.BLUE}üìä Gerando relat√≥rio Allure...{Style.RESET_ALL}")
        
        allure_results = self.resultados_dir / "allure-results"
        allure_report = self.resultados_dir / "allure-report"
        
        if not allure_results.exists() or not any(allure_results.iterdir()):
            print(f"{Fore.RED}‚ùå Nenhum resultado de teste encontrado.{Style.RESET_ALL}")
            print(f"{Fore.YELLOW}üí° Execute alguns testes primeiro.{Style.RESET_ALL}")
            return False
        
        try:
            # Gerar relat√≥rio
            subprocess.run([
                "allure", "generate", str(allure_results), 
                "-o", str(allure_report), "--clean"
            ], check=True, timeout=60)
            
            print(f"{Fore.GREEN}‚úÖ Relat√≥rio gerado com sucesso!{Style.RESET_ALL}")
            
            # Perguntar se quer abrir
            resposta = input(f"{Fore.YELLOW}üåê Abrir relat√≥rio no navegador? [S/n]: {Style.RESET_ALL}").strip().lower()
            if resposta not in ['n', 'nao', 'no']:
                subprocess.run(["allure", "open", str(allure_report)], check=True)
                print(f"{Fore.GREEN}üåê Relat√≥rio aberto no navegador!{Style.RESET_ALL}")
            
            return True
            
        except subprocess.CalledProcessError:
            print(f"{Fore.RED}‚ùå Erro ao gerar relat√≥rio Allure.{Style.RESET_ALL}")
            print(f"{Fore.YELLOW}üí° Verifique se o Allure est√° instalado: npm install -g allure-commandline{Style.RESET_ALL}")
            return False
        except FileNotFoundError:
            print(f"{Fore.RED}‚ùå Allure n√£o encontrado.{Style.RESET_ALL}")
            print(f"{Fore.YELLOW}üí° Instale o Allure: npm install -g allure-commandline{Style.RESET_ALL}")
            return False
    
    def mostrar_ajuda(self):
        """Mostrar informa√ß√µes de ajuda."""
        help_text = f"""
{Fore.CYAN}üìö AJUDA - TESTES E2E FETALCARE{Style.RESET_ALL}
{Fore.CYAN}{'=' * 50}{Style.RESET_ALL}

{Fore.YELLOW}üéØ TIPOS DE TESTE:{Style.RESET_ALL}

{Fore.GREEN}‚Ä¢ Fluxo Completo{Style.RESET_ALL}
  Testa o ciclo completo: gestante ‚Üí monitoramento ‚Üí an√°lise ‚Üí resultados
  Tempo estimado: 2-5 minutos por teste

{Fore.GREEN}‚Ä¢ Testes de Formul√°rio{Style.RESET_ALL}
  Valida√ß√µes de campos, preenchimento e salvamento
  Tempo estimado: 1-3 minutos

{Fore.GREEN}‚Ä¢ Testes de An√°lise ML{Style.RESET_ALL}
  Foco na funcionalidade de Machine Learning
  Tempo estimado: 3-8 minutos

{Fore.GREEN}‚Ä¢ Testes de Valida√ß√£o{Style.RESET_ALL}
  Tratamento de erros e dados inv√°lidos
  Tempo estimado: 2-4 minutos

{Fore.GREEN}‚Ä¢ Testes de Responsividade{Style.RESET_ALL}
  Layout em diferentes resolu√ß√µes (mobile, tablet, desktop)
  Tempo estimado: 5-10 minutos

{Fore.YELLOW}üîß PR√â-REQUISITOS:{Style.RESET_ALL}
‚Ä¢ Python 3.8+
‚Ä¢ Google Chrome (vers√£o atual)
‚Ä¢ Sistema FetalCare rodando:
  - Frontend: http://localhost:8080
  - Backend: http://localhost:5001

{Fore.YELLOW}üìã INSTALA√á√ÉO:{Style.RESET_ALL}
1. pip install -r requirements.txt
2. python scripts/setup_chromedriver.py (opcional)

{Fore.YELLOW}üìä RELAT√ìRIOS:{Style.RESET_ALL}
‚Ä¢ HTML: relatorios/html/report.html
‚Ä¢ Allure: relatorios/allure-report/
‚Ä¢ Screenshots: evidencias/screenshots/
‚Ä¢ Logs: evidencias/logs/

{Fore.YELLOW}‚ö° EXECU√á√ÉO R√ÅPIDA:{Style.RESET_ALL}
‚Ä¢ pytest cenarios/test_fluxo_completo.py -v
‚Ä¢ pytest -m smoke --headless
‚Ä¢ pytest -n auto (paralelo)

{Fore.YELLOW}üêõ SOLU√á√ÉO DE PROBLEMAS:{Style.RESET_ALL}
‚Ä¢ ChromeDriver: python scripts/setup_chromedriver.py
‚Ä¢ Timeout: Use --timeout=60 para mais tempo
‚Ä¢ Headless: Use --headless se n√£o precisar ver o navegador
‚Ä¢ Logs: Verifique evidencias/logs/pytest.log
"""
        print(help_text)
        input(f"\n{Fore.YELLOW}üìñ Pressione Enter para continuar...{Style.RESET_ALL}")
    
    def run(self):
        """Executar interface principal."""
        # Verificar se estamos no diret√≥rio correto
        if not (Path.cwd() / "requirements.txt").exists():
            print(f"{Fore.RED}‚ùå Execute este script do diret√≥rio E2E{Style.RESET_ALL}")
            return
        
        self.print_header()
        
        # Verificar pr√©-requisitos
        if not self.verificar_prerequisitos():
            resposta = input(f"\n{Fore.YELLOW}‚ùì Continuar mesmo assim? [s/N]: {Style.RESET_ALL}").strip().lower()
            if resposta not in ['s', 'sim', 'y', 'yes']:
                print(f"{Fore.YELLOW}üëã At√© mais!{Style.RESET_ALL}")
                return
        
        # Loop principal
        while True:
            try:
                escolha = self.mostrar_menu_principal()
                
                if escolha == "0":
                    print(f"\n{Fore.GREEN}üëã Obrigado por usar os testes E2E do FetalCare!{Style.RESET_ALL}")
                    print(f"{Fore.CYAN}üéØ Sistema de monitoramento fetal - Qualidade garantida{Style.RESET_ALL}")
                    break
                
                elif escolha == "1":
                    config = self.obter_configuracoes_execucao()
                    args = self.construir_argumentos_pytest("fluxo_completo", config)
                    self.executar_pytest(
                        args,
                        "Executando Testes de Fluxo Completo",
                        "Testando o fluxo principal end-to-end do sistema"
                    )
                
                elif escolha == "2":
                    config = self.obter_configuracoes_execucao()
                    args = self.construir_argumentos_pytest("formularios", config)
                    self.executar_pytest(
                        args,
                        "Executando Testes de Formul√°rio",
                        "Testando valida√ß√µes e preenchimento de formul√°rios"
                    )
                
                elif escolha == "3":
                    config = self.obter_configuracoes_execucao()
                    args = self.construir_argumentos_pytest("analise_ml", config)
                    self.executar_pytest(
                        args,
                        "Executando Testes de An√°lise ML",
                        "Testando funcionalidade de Machine Learning"
                    )
                
                elif escolha == "4":
                    config = self.obter_configuracoes_execucao()
                    args = self.construir_argumentos_pytest("validacoes", config)
                    self.executar_pytest(
                        args,
                        "Executando Testes de Valida√ß√£o",
                        "Testando tratamento de erros e valida√ß√µes"
                    )
                
                elif escolha == "5":
                    config = self.obter_configuracoes_execucao()
                    args = self.construir_argumentos_pytest("responsividade", config)
                    self.executar_pytest(
                        args,
                        "Executando Testes de Responsividade",
                        "Testando layout em diferentes resolu√ß√µes"
                    )
                
                elif escolha == "6":
                    print(f"\n{Fore.YELLOW}‚ö†Ô∏è  ATEN√á√ÉO: Suite completa pode demorar 15-30 minutos{Style.RESET_ALL}")
                    resposta = input(f"{Fore.YELLOW}‚ùì Continuar? [s/N]: {Style.RESET_ALL}").strip().lower()
                    if resposta in ['s', 'sim', 'y', 'yes']:
                        config = self.obter_configuracoes_execucao()
                        args = self.construir_argumentos_pytest("todos", config)
                        self.executar_pytest(
                            args,
                            "Executando TODOS os Testes E2E",
                            "Suite completa de testes End-to-End"
                        )
                
                elif escolha == "7":
                    self.gerar_relatorio_allure()
                
                elif escolha == "8":
                    config = self.obter_configuracoes_execucao()
                    print(f"\n{Fore.GREEN}‚úÖ Configura√ß√µes salvas para pr√≥xima execu√ß√£o:{Style.RESET_ALL}")
                    for key, value in config.items():
                        print(f"  {Fore.CYAN}{key}{Style.RESET_ALL}: {value}")
                
                elif escolha == "9":
                    self.mostrar_ajuda()
                
                # Perguntar se quer continuar ap√≥s execu√ß√£o
                if escolha in ["1", "2", "3", "4", "5", "6"]:
                    input(f"\n{Fore.YELLOW}üìñ Pressione Enter para voltar ao menu...{Style.RESET_ALL}")
                
            except KeyboardInterrupt:
                print(f"\n\n{Fore.YELLOW}‚èπÔ∏è  Interrompido pelo usu√°rio.{Style.RESET_ALL}")
                resposta = input(f"{Fore.YELLOW}‚ùì Sair do programa? [S/n]: {Style.RESET_ALL}").strip().lower()
                if resposta not in ['n', 'nao', 'no']:
                    break
            except Exception as e:
                print(f"\n{Fore.RED}üí• Erro inesperado: {e}{Style.RESET_ALL}")
                input(f"{Fore.YELLOW}üìñ Pressione Enter para continuar...{Style.RESET_ALL}")


if __name__ == "__main__":
    executor = TestExecutor()
    executor.run() 